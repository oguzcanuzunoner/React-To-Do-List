{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/TodoHeader/TodoHeader.js","components/Form/Form.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","content","id","useState","check","setCheck","className","onClick","class","delete","xmlns","width","height","fill","viewBox","d","fill-rule","TodoList","todos","map","todo","key","TodoHeader","Form","userInput","onInputChange","addItem","onSubmit","event","preventDefault","type","value","onChange","App","currentValue","state","Math","random","setState","e","newVal","target","deleteItem","filter","this","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gWA0BeA,MAvBf,SAAcC,GAAQ,IACZC,EAAgBD,EAAhBC,QAASC,EAAOF,EAAPE,GADE,EAEOC,oBAAS,GAFhB,mBAEZC,EAFY,KAELC,EAFK,KAQnB,OACE,yBACEC,UAAS,oCAA+BF,EAAQ,UAAY,IAC5DG,QAPe,WACjBF,GAAUD,KAQR,8BAAOH,GACP,uBAAGO,MAAM,sBAAqBD,QAAS,kBAAMP,EAAMS,OAAOP,KAAK,yBAAKQ,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,KAAK,eAAeL,MAAM,cAAcM,QAAQ,aAClL,0BAAMC,EAAE,oKACR,0BAAMC,YAAU,UAAUD,EAAE,mP,MCCfE,MAhBf,SAAkBjB,GAChB,OACE,6BACE,4BACGA,EAAMkB,MAAMC,KAAI,SAACC,GAChB,OACE,wBAAId,UAAU,mBACZ,kBAAC,EAAD,iBAAcc,EAAd,CAAoBC,IAAKD,EAAKlB,GAAIO,OAAQT,EAAMS,iB,MCF/Ca,MANf,WACA,OACA,wBAAIhB,UAAU,cAAd,cCiBeiB,G,YAnBF,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,UAAWC,EAA6B,EAA7BA,cAAeC,EAAc,EAAdA,QAIxC,OACE,0BAAMpB,UAAU,QAAQqB,SAJL,SAACC,GACpBA,EAAMC,mBAIJ,2BACEC,KAAK,OACLC,MAAOP,EACPQ,SAAUP,EACVnB,UAAU,iBAEZ,4BAAQC,QAASmB,EAASpB,UAAU,mBAApC,WC+DS2B,E,kDAvEb,WAAYjC,GAAQ,IAAD,8BACjB,cAAMA,IAQR0B,QAAU,WAER,IAAMQ,EAAe,EAAKC,MAAMX,UAEhC,GAA6B,KAAzB,EAAKW,MAAMX,UAAkB,CAC/B,IAAMA,EAAY,CAEhBtB,GAAIkC,KAAKC,SACTpC,QAASiC,GAGX,EAAKI,SACH,CAGEpB,MAAM,GAAD,mBAAM,EAAKiB,MAAMjB,OAAjB,CAAwBM,MAE/B,WAEE,EAAKc,SAAS,CACZd,UAAW,UA7BF,EAoCnBC,cAAgB,SAACc,GACf,IAAMC,EAASD,EAAEE,OAAOV,MACxB,EAAKO,SAAS,CACZd,UAAWgB,KAvCI,EA2CnBE,WAAa,SAACxC,GACZ,IACIyC,EADS,YAAO,EAAKR,MAAMjB,OACRyB,QAAO,SAAAvB,GAAI,OAAIA,EAAKlB,KAAOA,KAClD,EAAKoC,SAAS,CAACpB,MAAOyB,KA5CtB,EAAKR,MAAQ,CACXX,UAAW,GACXN,MAAO,IAJQ,E,qDAqDjB,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEkB,UAAWoB,KAAKT,MAAMX,UACtBC,cAAemB,KAAKnB,cACpBC,QAASkB,KAAKlB,UAEfkB,KAAKT,MAAMjB,MAAM2B,OAAS,GACzB,yBAAKvC,UAAU,QACb,kBAAC,EAAD,CAAUY,MAAO0B,KAAKT,MAAMjB,MAAOT,OAAQmC,KAAKF,mB,GAhE1CI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0a431980.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./TodoItem.css\";\r\n\r\nfunction Todo(props) {\r\n  const { content, id } = props;\r\n  const [check, setCheck] = useState(false);\r\n\r\n  const checkClick = () => {\r\n    setCheck(!check);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`d-flex align-items-center ${check ? \"checked\" : \"\"}`}\r\n      onClick={checkClick}\r\n    >\r\n      <span>{content}</span>\r\n      <i class=\"bi bi-trash ml-auto\"onClick={() => props.delete(id)}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-trash\" viewBox=\"0 0 16 16\">\r\n  <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/>\r\n  <path fill-rule=\"evenodd\" d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/>\r\n</svg></i>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport TodoItem from \"../TodoItem/TodoItem\";\r\nimport \"./TodoList.css\";\r\n\r\nfunction TodoList(props) {\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {props.todos.map((todo) => {\r\n          return (\r\n            <li className=\"list-group-item\">\r\n              <TodoItem {...todo} key={todo.id} delete={props.delete} />\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\r\nimport \"./TodoHeader.css\"\r\n\r\nfunction TodoHeader(){\r\nreturn(\r\n<h1 className=\"toDoHeader\">Todo List</h1>\r\n);\r\n}\r\n\r\nexport default TodoHeader;","import React from \"react\";\r\nimport \"./Form.css\";\r\n\r\nconst Form = ({ userInput, onInputChange, addItem }) => {\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n  };\r\n  return (\r\n    <form className=\"input\" onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={userInput}\r\n        onChange={onInputChange}\r\n        className=\"form-control\"\r\n      />\r\n      <button onClick={addItem} className=\"btn btn-primary\">\r\n        Ekle\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\r\nimport TodoList from \"./components/TodoList/TodoList\";\r\nimport TodoHeader from \"./components/TodoHeader/TodoHeader\";\r\nimport \"./App.css\";\r\nimport Form from \"./components/Form/Form\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      userInput: \"\",\r\n      todos: [],\r\n    };\r\n  }\r\n\r\n  // Eğer input alanı boş değilse todos'a ekleye\r\n  addItem = () => {\r\n    // input'ta yazılı olan string değer\r\n    const currentValue = this.state.userInput;\r\n\r\n    if (this.state.userInput !== \"\") {\r\n      const userInput = {\r\n        // Delete yaparken kullanılabilmesi için bir her item için random bir id\r\n        id: Math.random(),\r\n        content: currentValue,\r\n      };\r\n\r\n      this.setState(\r\n        {\r\n          // Var olan array'i korumak için spread operatör kullanılıyor\r\n          // spread operatör ile şu anki \"todos\" array elemanlarını alıyoruz ve yenisini ekliyoruz\r\n          todos: [...this.state.todos, userInput],\r\n        },\r\n        () => {\r\n          // Input'tan alınan değer state'e eklendikten sonra input'u temizliyoruz\r\n          this.setState({\r\n            userInput: \"\",\r\n          });\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  onInputChange = (e) => {\r\n    const newVal = e.target.value;\r\n    this.setState({\r\n      userInput: newVal,\r\n    });\r\n  };\r\n\r\n  deleteItem = (id) =>{\r\n    let copyTodos = [...this.state.todos]\r\n    let filter = copyTodos.filter(todo => todo.id !== id)\r\n    this.setState({todos: filter})\r\n    \r\n  }\r\n\r\n \r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <TodoHeader />\r\n        <Form\r\n          userInput={this.state.userInput}\r\n          onInputChange={this.onInputChange}\r\n          addItem={this.addItem}\r\n        />\r\n        {this.state.todos.length > 0 && (\r\n          <div className=\"list\">\r\n            <TodoList todos={this.state.todos} delete={this.deleteItem} />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}